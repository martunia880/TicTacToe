{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\martu\\\\OneDrive\\\\Desktop\\\\TicTacToe\\\\TicTacToe\\\\ClientApp\\\\src\\\\components\\\\gameComponents\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport { Square } from \"./Square\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.draw = (event, squareIndex) => {\n      const squares = [...this.state.squares]; // Tworzenie kopii tablicy stanu planszy\n\n      if (squares[squareIndex] || calculateWinner(squares)) {\n        // Jeśli komórka jest już zapełniona lub mamy już zwycięzcę, nie rób nic\n        return;\n      }\n\n      squares[squareIndex] = this.state.xIsNext ? \"X\" : \"O\"; // Ustawienie wartości w komórce planszy\n\n      this.setState({\n        squares: squares,\n        // Zaktualizowanie stanu planszy\n        xIsNext: !this.state.xIsNext // Zmiana kolejności gracza\n\n      });\n    };\n\n    this.state = {\n      squares: Array(9).fill(null),\n      // Tablica reprezentująca stan planszy\n      xIsNext: true // Czyja jest kolej\n\n    };\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = \"Wygrał: \" + winner;\n    } else {\n      status = \"Następny gracz: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), this.state.squares.map((value, index) => /*#__PURE__*/_jsxDEV(Square, {\n        value: value,\n        onClick: e => this.draw(e, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Funkcja pomocnicza do sprawdzania, czy jest zwycięzca\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"names":["React","Component","Square","Board","constructor","props","draw","event","squareIndex","squares","state","calculateWinner","xIsNext","setState","Array","fill","render","winner","status","map","value","index","e","lines","i","length","a","b","c"],"sources":["C:/Users/martu/OneDrive/Desktop/TicTacToe/TicTacToe/ClientApp/src/components/gameComponents/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Square } from \"./Square\";\r\n\r\nexport class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(9).fill(null), // Tablica reprezentująca stan planszy\r\n      xIsNext: true, // Czyja jest kolej\r\n    };\r\n  }\r\n\r\n  draw = (event, squareIndex) => {\r\n    const squares = [...this.state.squares]; // Tworzenie kopii tablicy stanu planszy\r\n\r\n    if (squares[squareIndex] || calculateWinner(squares)) {\r\n      // Jeśli komórka jest już zapełniona lub mamy już zwycięzcę, nie rób nic\r\n      return;\r\n    }\r\n\r\n    squares[squareIndex] = this.state.xIsNext ? \"X\" : \"O\"; // Ustawienie wartości w komórce planszy\r\n\r\n    this.setState({\r\n      squares: squares, // Zaktualizowanie stanu planszy\r\n      xIsNext: !this.state.xIsNext, // Zmiana kolejności gracza\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const winner = calculateWinner(this.state.squares);\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Wygrał: \" + winner;\r\n    } else {\r\n      status = \"Następny gracz: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"board\">\r\n        <div className=\"status\">{status}</div>\r\n        {this.state.squares.map((value, index) => (\r\n          <Square key={index} value={value} onClick={(e) => this.draw(e, index)} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Funkcja pomocnicza do sprawdzania, czy jest zwycięzca\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}